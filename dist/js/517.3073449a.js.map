{"version":3,"file":"js/517.3073449a.js","mappings":"+JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,YAAY,oBAAoB,CAACF,EAAG,SAAS,CAACE,YAAY,SAASC,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAON,EAAIO,SAAS,EAAE,IAAI,CAACP,EAAIQ,GAAG,cAAcN,EAAG,SAAS,CAACE,YAAY,SAASC,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAON,EAAIO,SAAS,EAAE,IAAI,CAACP,EAAIQ,GAAG,cAAcN,EAAG,SAAS,CAACE,YAAY,SAASC,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAON,EAAIO,SAAS,EAAE,IAAI,CAACP,EAAIQ,GAAG,gBAAgBN,EAAG,MAAM,CAACE,YAAY,OAAO,CAACJ,EAAIQ,GAAG,IAAIR,EAAIS,GAAGT,EAAIU,QAAQR,EAAG,SAAS,CAACS,MAAM,CAAC,IAAMX,EAAIY,SAAS,MAAQ,OAAO,OAAS,MAAM,YAAc,QACtlB,EACIC,EAAkB,G,SCEtB,GACE,IAAAC,GACE,MAAO,CACLC,IAAK,iHACLC,QAAS,KACTC,SAAS,EACTC,MAAO,KACPN,SAAU,GACVF,IAAK,KAET,EACAS,QAAS,CACP,oBAAMC,GACJnB,KAAKgB,SAAU,EACfhB,KAAKiB,MAAQ,KACb,IACE,MAAMG,EAAU,0DACVC,QAAiBC,EAAA,EAAMC,IAAIH,GACjCpB,KAAKe,QAAUM,EAASR,KACxBb,KAAKwB,eACP,CAAE,MAAOP,GACPQ,QAAQR,MAAM,6BAA8BA,EAC9C,CAAE,QACAjB,KAAKgB,SAAU,CACjB,CAGF,EACA,aAAAQ,GACuB,GAAlBxB,KAAK0B,UACN1B,KAAKS,IAAM,UAAYT,KAAKe,QAAQY,aAAa,GAAK,KAC3B,GAAlB3B,KAAK0B,UACd1B,KAAKS,IAAM,UAAYT,KAAKe,QAAQY,aAAa,GAAK,IAC3B,GAAlB3B,KAAK0B,YACd1B,KAAKS,IAAM,YAAcT,KAAKe,QAAQY,aAAa,GAAK,MAE5D,EACA,QAAArB,CAASsB,GACP5B,KAAK0B,UAAYE,EACjB5B,KAAKW,SAAWX,KAAKc,IAAMc,EAC3B5B,KAAKmB,iBACLnB,KAAK6B,oBAAsBC,aAAY,KACrC9B,KAAKmB,gBAAgB,GACpB,IACL,GAEF,OAAAY,GACE/B,KAAKmB,iBACLnB,KAAKgC,SAAWF,YAAY9B,KAAKmB,eAAgB,IACnD,EAEA,aAAAc,GACEC,cAAclC,KAAKgC,SACrB,GCzDyI,I,OCQvIG,GAAY,OACd,EACArC,EACAc,GACA,EACA,KACA,WACA,MAIF,EAAeuB,EAAiB,O","sources":["webpack://vue-sample/./src/component/LiveSensorPage.vue?37a0","webpack://vue-sample/src/component/LiveSensorPage.vue","webpack://vue-sample/./src/component/LiveSensorPage.vue?4075","webpack://vue-sample/./src/component/LiveSensorPage.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('nav',{staticClass:\"button-container\"},[_c('button',{staticClass:\"button\",on:{\"click\":function($event){return _vm.chpannel(4)}}},[_vm._v(\" 온도 데이터 \")]),_c('button',{staticClass:\"button\",on:{\"click\":function($event){return _vm.chpannel(6)}}},[_vm._v(\" 습도 데이터 \")]),_c('button',{staticClass:\"button\",on:{\"click\":function($event){return _vm.chpannel(8)}}},[_vm._v(\" CO 데이터 \")])]),_c('div',{staticClass:\"tmp\"},[_vm._v(\" \"+_vm._s(_vm.tmp))]),_c('iframe',{attrs:{\"src\":_vm.panelSrc,\"width\":\"100%\",\"height\":\"200\",\"frameborder\":\"0\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      src: 'http://52.36.71.154:3000/d-solo/ENk1jS84k/test?orgId=1&refresh=5s&from=1694573098947&to=1694594698947&panelId=', \r\n      apiData: null,\r\n      loading: false,\r\n      error: null,\r\n      panelSrc: '',\r\n      tmp: null,  \r\n    };\r\n  },\r\n  methods: {\r\n    async fetchAssetData() {\r\n      this.loading = true;\r\n      this.error = null;\r\n      try {\r\n        const API_URL = `https://p3j7hfgon0.execute-api.us-west-2.amazonaws.com/`;\r\n        const response = await axios.get(API_URL);\r\n        this.apiData = response.data;\r\n        this.updateTmpData();  // apiData가 업데이트되면 updateTmpData 호출\r\n      } catch (error) {\r\n        console.error('Error fetching asset data:', error);\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n      \r\n\r\n    },\r\n    updateTmpData() {\r\n      if(this.currentId == 4) {\r\n        this.tmp = \"현재 온도 :\" + this.apiData.doubleValues[0] + \"°C\";\r\n      } else if (this.currentId == 6) {\r\n        this.tmp = \"현재 습도 :\" + this.apiData.doubleValues[2] + \"%\";\r\n      } else if (this.currentId == 8) {\r\n        this.tmp = \"현재 CO농도 :\" + this.apiData.doubleValues[1] + \"ppm\";\r\n      }\r\n    },\r\n    chpannel(id) {\r\n      this.currentId = id;  // 현재 선택된 ID를 저장\r\n      this.panelSrc = this.src + id;\r\n      this.fetchAssetData();\r\n      this.intervalForChpannel = setInterval(() => {\r\n        this.fetchAssetData();\r\n      }, 3000);\r\n    }\r\n},\r\n  mounted() {\r\n    this.fetchAssetData(); \r\n    this.interval = setInterval(this.fetchAssetData, 3000); \r\n  },\r\n\r\n  beforeDestroy() {\r\n    clearInterval(this.interval); // 컴포넌트가 파괴되기 전에 setInterval을 정지합니다.\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n<template>\r\n  <div>\r\n    <nav class=\"button-container\">\r\n      <button class=\"button\" @click=\"chpannel(4)\"> 온도 데이터 </button>\r\n      <button class=\"button\" @click=\"chpannel(6)\"> 습도 데이터 </button>\r\n      <button class=\"button\" @click=\"chpannel(8)\"> CO 데이터 </button>\r\n    </nav>\r\n    <div class = \" tmp\"> {{ tmp }}</div>\r\n    <iframe :src=\"panelSrc\" width=\"100%\" height=\"200\" frameborder=\"0\"></iframe>\r\n    \r\n  </div>\r\n</template>\r\n\r\n\r\n<style scoped>\r\n.button-container {\r\n  display: flex;         /* flexbox를 사용하여 버튼을 가로로 배치 */\r\n  flex-direction: row;   /* 가로 방향으로 요소 배치 */\r\n  justify-content: center;  /* 중앙에 버튼을 정렬 */\r\n  flex-wrap: wrap;          /* 요소가 너무 많으면 다음 줄로 이동 */\r\n}\r\n\r\n.button {\r\n  padding: 10px 20px;       /* 버튼 내부의 여백 */\r\n  background-color: rgb(109, 109, 243);   /* 배경색 */\r\n  color: white;             /* 텍스트 색상 */\r\n  margin: 5px;              /* 버튼 간의 간격 */\r\n  border-radius: 5px;       /* 버튼 모서리 둥글게 */\r\n  text-align: center;       /* 텍스트를 버튼 중앙에 정렬 */\r\n  flex: 1;                  /* 가용 공간에 따라 요소의 크기 조절 */\r\n  min-width: 100px;         /* 최소 너비 설정 */\r\n  border: 0px;\r\n}\r\n.tmp {\r\n  color: #42b983; \r\n  font-size:larger;\r\n  text-align: center;\r\n  font-family: 'Roboto Slab', serif;  \r\n  text-transform: uppercase;  \r\n  background-color: rgba(255, 255, 255, 0.1);  \r\n  padding: 10px;  \r\n  border-radius: 8px;\r\n  font-weight: bold;  \r\n}\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./LiveSensorPage.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./LiveSensorPage.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./LiveSensorPage.vue?vue&type=template&id=2e03404c&scoped=true&\"\nimport script from \"./LiveSensorPage.vue?vue&type=script&lang=js&\"\nexport * from \"./LiveSensorPage.vue?vue&type=script&lang=js&\"\nimport style0 from \"./LiveSensorPage.vue?vue&type=style&index=0&id=2e03404c&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2e03404c\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","on","$event","chpannel","_v","_s","tmp","attrs","panelSrc","staticRenderFns","data","src","apiData","loading","error","methods","fetchAssetData","API_URL","response","axios","get","updateTmpData","console","currentId","doubleValues","id","intervalForChpannel","setInterval","mounted","interval","beforeDestroy","clearInterval","component"],"sourceRoot":""}